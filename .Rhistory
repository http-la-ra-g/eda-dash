fileInput("arquivo", "Selecione o arquivo Excel",
accept = c(".xlsx", ".xls")),
# Seleção das colunas após carregar o arquivo
uiOutput("selecao_coluna_data"),
uiOutput("selecao_coluna_preco"),
uiOutput("selecao_coluna_indice"),
# Input para valor de referência
numericInput("valor_ref", "Valor de Referência para Deflação:",
value = 100, min = 0),
# Botão para processar
actionButton("processar", "Processar Deflação")
),
mainPanel(
# Abas para tabela e gráfico
tabsetPanel(
tabPanel("Tabela", DTOutput("tabela_resultado")),
tabPanel("Gráfico", plotOutput("grafico_series"))
)
)
)
)
# Servidor
server <- function(input, output) {
# Leitura do arquivo
dados <- reactive({
req(input$arquivo)
read_excel(input$arquivo$datapath)
})
# UI dinâmica para seleção da coluna de data
output$selecao_coluna_data <- renderUI({
req(dados())
selectInput("coluna_data", "Selecione a coluna de data:",
choices = names(dados()))
})
# UI dinâmica para seleção de colunas
output$selecao_coluna_preco <- renderUI({
req(dados())
selectInput("coluna_preco", "Selecione a coluna de preços:",
choices = names(dados()))
})
output$selecao_coluna_indice <- renderUI({
req(dados())
selectInput("coluna_indice", "Selecione a coluna do índice:",
choices = names(dados()))
})
# Processamento dos dados
dados_processados <- eventReactive(input$processar, {
req(dados(), input$coluna_preco, input$coluna_indice, input$valor_ref)
df <- dados()
indices <- df[[input$coluna_indice]]
precos <- df[[input$coluna_preco]]
# Cálculo do fator de deflação
valor_referencia <- numeric(nrow(df))
valor_referencia[1] <- input$valor_ref * (indices[1] + 1)
#criando correção
for (i in 2:nrow(df)){
valor_referencia[i] <- valor_referencia[i-1] * (indices[i] + 1)
}
# Cálculo dos valores deflacionados
df$valor_deflacionado <- (valor_referencia[length(valor_referencia)]*precos)/valor_referencia
return(df)
})
# Output da tabela
output$tabela_resultado <- renderDT({
req(dados_processados())
datatable(dados_processados())
})
# Output do gráfico atualizado
output$grafico_series <- renderPlot({
req(dados_processados())
df_long <- dados_processados() %>%
select(!!sym(input$coluna_data), !!sym(input$coluna_preco), valor_deflacionado) %>%
tidyr::pivot_longer(cols = c(!!sym(input$coluna_preco), valor_deflacionado),
names_to = "Serie",
values_to = "Valor") %>%
mutate(
Serie = ifelse(Serie == input$coluna_preco, "Preço R$", "Preço corrigido R$"),
# Extraindo o ano do formato mes/ano
Ano = as.numeric(sub(".*/", "", !!sym(input$coluna_data)))
) %>%
# Agrupando por ano e série para calcular médias anuais
group_by(Ano, Serie) %>%
summarise(Valor = mean(Valor, na.rm = TRUE), .groups = 'drop')
ggplot(df_long, aes(x = Ano, y = Valor, color = Serie, group = Serie)) +
geom_line(linewidth = 1) +
scale_color_manual(values = c("Preço R$" = "#4472C4", "Preço corrigido R$" = "#70AD47")) +
theme_minimal() +
labs(title = "",
x = "Ano da cotação",
y = "Preço da saca de café (R$)") +
theme(
legend.position = "top",
legend.title = element_blank(),
panel.grid.major = element_line(color = "gray90"),
panel.grid.minor = element_line(color = "gray95"),
axis.text.x = element_text(angle = 45, hjust = 1),
axis.title.y = element_text(margin = margin(r = 10)),
axis.title.x = element_text(margin = margin(t = 10))
) +
scale_y_continuous(labels = function(x) format(x, big.mark = ".", decimal.mark = ",")) +
scale_x_continuous(breaks = function(x) seq(floor(min(x)), ceiling(max(x)), by = 1))
})
}
# Execução do app
shinyApp(ui = ui, server = server)
library(shiny)
library(shinydashboard)
library(DT)
library(openxlsx)
# Interface do usuário (UI)
ui <- dashboardPage(
skin = "purple",
# Cabeçalho
dashboardHeader(title = "Ajuste de Altura"),
# Barra lateral
dashboardSidebar(
sidebarMenu(
menuItem("Início", tabName = "inicio", icon = icon("home")),
menuItem("Ajuste", tabName = "ajuste", icon = icon("chart-line")),
menuItem("Sobre", tabName = "sobre", icon = icon("info-circle"))
)
),
# Corpo
dashboardBody(
tags$head(
tags$style(HTML("
.main-footer {
position: fixed;
bottom: 0;
width: 100%;
text-align: center;
padding: 10px;
background-color: #f8f9fa;
}
"))
),
tabItems(
# Aba Início
tabItem(tabName = "inicio",
fluidRow(
box(
width = 12,
title = "Bem-vindo ao Ajuste de Altura",
status = "primary",
solidHeader = TRUE,
"Este aplicativo permite realizar ajustes múltiplos de altura para dados de inventário florestal."
)
)
),
# Aba Ajuste
tabItem(tabName = "ajuste",
fluidRow(
box(
width = 12,
title = "Upload de Dados",
status = "primary",
fileInput("arquivo", "Selecione o arquivo Excel (.xlsx)",
accept = c(".xlsx")),
actionButton("processar", "Processar Dados",
class = "btn-primary")
)
),
fluidRow(
box(
width = 12,
title = "Resultados",
status = "primary",
DTOutput("tabela_resultados")
)
)
),
# Aba Sobre
tabItem(tabName = "sobre",
fluidRow(
box(
width = 12,
title = "Sobre o Aplicativo",
status = "primary",
solidHeader = TRUE,
"Este aplicativo foi desenvolvido para realizar ajustes múltiplos de altura em dados de inventário florestal.",
br(), br(),
"Os modelos utilizados são:",
tags$ul(
tags$li("ht ~ dap"),
tags$li("ht ~ 1/dap²"),
tags$li("ht ~ dap²"),
tags$li("ht ~ dap + dap²")
)
)
)
)
),
# Rodapé
tags$footer(
class = "main-footer",
"Shiny desenvolvido por Lara Gualberto"
)
)
)
# Servidor
server <- function(input, output, session) {
dados_processados <- eventReactive(input$processar, {
req(input$arquivo)
dados_parcela <- read.xlsx(input$arquivo$datapath)
parcelas <- unique(dados_parcela$parcela)
modelos <- c(
ht~dap,
ht~I(1/dap^2),
ht~I(dap^2),
ht~dap+I(dap^2))
syx <- c()
ajuste <- c()
result <- c()
for(i in 1:NROW(parcelas)){
dados_ajuste <- subset(dados_parcela, dados_parcela[1]==parcelas[i]&dados_parcela[4]!=0)
dados_sem_zero <- subset(dados_parcela, dados_parcela[,1]==parcelas[i] & dados_parcela[,4]==0,)
for(j in 1:NROW(modelos)){
ajuste <- lm(modelos[[j]], dados_ajuste)
syx[j] <- summary(ajuste)[[6]]
}
modelo_melhor <- lm(modelos[[which.min(syx)]], dados_ajuste)
dados_sem_zero[,4] <- predict(modelo_melhor, dados_sem_zero)
result <- rbind(result, rbind(dados_ajuste, dados_sem_zero))
}
return(result)
})
output$tabela_resultados <- renderDT({
req(dados_processados())
datatable(dados_processados(),
options = list(
pageLength = 10,
scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
})
}
# Executa o aplicativo
shinyApp(ui = ui, server = server)
# Instalação dos pacotes necessários
if (!require("shiny")) install.packages("shiny")
if (!require("shinythemes")) install.packages("shinythemes")
if (!require("shinyWidgets")) install.packages("shinyWidgets")
if (!require("fontawesome")) install.packages("fontawesome")
if (!require("DT")) install.packages("DT")
if (!require("openxlsx")) install.packages("openxlsx")
# Carregamento dos pacotes
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(fontawesome)
library(DT)
library(openxlsx)
# Interface do usuário (UI)
ui <- fluidPage(
theme = shinytheme("flatly"),
# CSS personalizado
tags$head(
tags$style(HTML("
.titulo-app {
padding: 15px;
background-color: #2C3E50;
color: white;
margin-bottom: 20px;
border-radius: 5px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.box-input {
background-color: white;
padding: 20px;
border-radius: 5px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
margin-bottom: 20px;
}
.btn-primary {
background-color: #2C3E50;
border-color: #2C3E50;
}
.btn-primary:hover {
background-color: #34495E;
border-color: #34495E;
}
.tab-panel {
background-color: white;
padding: 20px;
border-radius: 5px;
box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}
.footer {
position: fixed;
bottom: 0;
width: 100%;
text-align: center;
padding: 10px;
background-color: #f8f9fa;
border-top: 1px solid #ddd;
}
"))
),
# Cabeçalho
div(class = "titulo-app",
h2("Ajuste de Altura", align = "center"),
p("Ajuste múltiplo de altura para dados de inventário florestal",
align = "center", style = "opacity: 0.8;")
),
sidebarLayout(
sidebarPanel(
div(class = "box-input",
fileInput("arquivo",
tags$span(icon("file-upload"), "Selecione o arquivo Excel (.xlsx)"),
accept = c(".xlsx")),
fileInput("modelos_file",
tags$span(icon("file-upload"), "Selecione o arquivo de modelos (.txt)"),
accept = c(".txt")),
helpText("O arquivo .txt deve conter um modelo por linha no formato: ht~dap"),
actionButton("processar",
label = tags$span(icon("calculator"), "Processar Dados"),
class = "btn-calcular btn-primary",
style = "width: 100%; margin-top: 10px;")
),
width = 3
),
mainPanel(
width = 9,
div(class = "tab-panel",
tabsetPanel(
type = "pills",
# Aba Sobre
tabPanel(tags$span(icon("info-circle"), "Sobre"),
div(style = "padding: 20px;",
div(class = "well",
h3("O que é o Ajuste de Altura?"),
p("Este aplicativo realiza ajustes múltiplos de altura para dados de inventário florestal,
utilizando diferentes modelos matemáticos para encontrar a melhor estimativa.")
),
div(class = "well",
h3("Como usar este aplicativo"),
tags$ol(
tags$li("Faça upload do arquivo Excel (.xlsx) com os dados do inventário"),
tags$li("Faça upload do arquivo de modelos (.txt)"),
tags$li("Clique em 'Processar Dados'"),
tags$li("Visualize os resultados na aba 'Resultados'")
)
),
div(class = "well",
h3("Formato dos Arquivos"),
h4("Arquivo Excel:"),
p("Deve conter as colunas:"),
tags$ul(
tags$li("parcela"),
tags$li("dap"),
tags$li("ht")
),
h4("Arquivo de Modelos:"),
p("Deve conter um modelo por linha, exemplo:"),
tags$pre("ht~dap\nht~I(1/dap^2)\nht~I(dap^2)\nht~dap+I(dap^2)")
)
)
),
# Aba Modelos
tabPanel(tags$span(icon("chart-line"), "Modelos"),
div(style = "padding: 20px;",
div(class = "well",
h4("Modelos Carregados:"),
verbatimTextOutput("modelos_preview")
)
)
),
# Aba Resultados
tabPanel(tags$span(icon("table"), "Resultados"),
div(style = "padding: 20px;",
DTOutput("tabela_resultados")
)
)
)
)
)
),
# Rodapé
tags$footer(class = "footer",
"Shiny desenvolvido por Lara Gualberto")
)
# Servidor
server <- function(input, output, session) {
# Leitura dos modelos do arquivo txt
modelos <- reactive({
req(input$modelos_file)
modelos_txt <- readLines(input$modelos_file$datapath)
modelos_list <- lapply(modelos_txt, function(x) as.formula(x))
return(modelos_list)
})
# Preview dos modelos carregados
output$modelos_preview <- renderPrint({
req(modelos())
cat("Modelos carregados:\n")
for(m in modelos()) {
cat(deparse(m), "\n")
}
})
dados_processados <- eventReactive(input$processar, {
req(input$arquivo, modelos())
dados_parcela <- read.xlsx(input$arquivo$datapath)
parcelas <- unique(dados_parcela$parcela)
syx <- c()
ajuste <- c()
result <- c()
for(i in 1:NROW(parcelas)){
dados_ajuste <- subset(dados_parcela, dados_parcela[1]==parcelas[i]&dados_parcela[4]!=0)
dados_sem_zero <- subset(dados_parcela, dados_parcela[,1]==parcelas[i] & dados_parcela[,4]==0,)
for(j in 1:length(modelos())){
ajuste <- lm(modelos()[[j]], dados_ajuste)
syx[j] <- summary(ajuste)[[6]]
}
modelo_melhor <- lm(modelos()[[which.min(syx)]], dados_ajuste)
dados_sem_zero[,4] <- predict(modelo_melhor, dados_sem_zero)
result <- rbind(result, rbind(dados_ajuste, dados_sem_zero))
}
return(result)
})
output$tabela_resultados <- renderDT({
req(dados_processados())
datatable(dados_processados(),
options = list(
pageLength = 10,
scrollX = TRUE,
dom = 'Bfrtip',
buttons = c('copy', 'csv', 'excel')
))
})
}
# Executa o aplicativo
shinyApp(ui = ui, server = server)
install.packages(c("cli", "fs", "glue", "rlang", "xml2"), type = "source")
install.packages(c("cli", "fs", "glue", "rlang", "xml2"), type = "source")
install.packages("gt")
library("plotly")
library(tidyverse)
?ggplotly
library(ggplot2)
install.packages("gt")
library(gt)
file.rename("EDA project.qmd", "dashboard_eda.qmd")
View(dados)
rm(list=ls())
library(tidyverse)
library(readxl)
dados2017 <- read_excel("D:/Projeto EDA/Volume2017.xlsx")
dados2018 <- read_excel("D:/Projeto EDA/Volume2018.xlsx")
dados2019 <- read_excel("D:/Projeto EDA/Volume2019.xlsx")
dados2020 <- read_excel("D:/Projeto EDA/Volume2020.xlsx")
dados2021 <- read_excel("D:/Projeto EDA/Volume2021.xlsx")
dados2022 <- read_excel("D:/Projeto EDA/Volume2022.xlsx")
dados2023 <- read_excel("D:/Projeto EDA/Volume2023.xlsx")
dados2024 <- read_excel("D:/Projeto EDA/Volume2024.xlsx")
dadostotais <- rbind(dados2017, dados2018, dados2019, dados2020, dados2021, dados2022, dados2023, dados2024)
remove(dados2017, dados2018, dados2019, dados2020, dados2021, dados2022, dados2023, dados2024)
dadostotais <- dadostotais %>%  select(NRO_REGISTRO, DATA_DE_EMISSAO, UF, MUNICIPIO, ATIVIDADE, PRODUTO, NOME_CIENTIFICO, VOLUME_AUTORIZADO, VOLUME_EXPLORADO, DATA_DA_EXPLORACAO, SITUACAO)
dadostotais <- as_tibble(dadostotais)
dadostotais <- dadostotais %>%
mutate(ANO_EXPLORACAO = year(DATA_DA_EXPLORACAO))
dadostotais <- dadostotais %>%
mutate(ANO = year(DATA_DE_EMISSAO))
View(dadostotais)
#removendo especies sem nomes
dadostotais <- dadostotais |>
filter(NOME_CIENTIFICO != "Diversos") |>
mutate(NOME_CIENTIFICO = fct_drop(NOME_CIENTIFICO))
dadostotais <- dadostotais |>
filter(PRODUTO == "Tora (m3)") |>
mutate(PRODUTO = fct_drop(PRODUTO))
dados2017 <- read_excel("D:/Projeto EDA/Volume2017.xlsx")
dados2018 <- read_excel("D:/Projeto EDA/Volume2018.xlsx")
dados2019 <- read_excel("D:/Projeto EDA/Volume2019.xlsx")
dados2020 <- read_excel("D:/Projeto EDA/Volume2020.xlsx")
dados2021 <- read_excel("D:/Projeto EDA/Volume2021.xlsx")
dados2022 <- read_excel("D:/Projeto EDA/Volume2022.xlsx")
dados2023 <- read_excel("D:/Projeto EDA/Volume2023.xlsx")
dados2024 <- read_excel("D:/Projeto EDA/Volume2024.xlsx")
dadostotais <- rbind(dados2017, dados2018, dados2019, dados2020, dados2021, dados2022, dados2023, dados2024)
remove(dados2017, dados2018, dados2019, dados2020, dados2021, dados2022, dados2023, dados2024)
dadostotais <- dadostotais %>%  select(NRO_REGISTRO, DATA_DE_EMISSAO, UF, MUNICIPIO, ATIVIDADE, PRODUTO, NOME_CIENTIFICO, VOLUME_AUTORIZADO, VOLUME_EXPLORADO, DATA_DA_EXPLORACAO, SITUACAO)
dadostotais <- as_tibble(dadostotais)
dadostotais <- dadostotais %>%
mutate(ANO_EXPLORACAO = year(DATA_DA_EXPLORACAO))
View(dadostotais)
dadostotais <- dadostotais |>
filter(NOME_CIENTIFICO != "Diversos") |>
mutate(NOME_CIENTIFICO = fct_drop(NOME_CIENTIFICO))
dadostotais <- dadostotais %>%
mutate(PRODUTO = recode(PRODUTO,
'Escoramento (m3)' = "Escoramento (m3)",
'Escoramento(m3)' = "Escoramento (m3)",
'Estacas (m3)' = "Estacas (m3)",
'Estacas(m3)' = "Estacas (m3)",
'Lascas (m3)'= "Lascas (m3)",
'Lenha(m3)'= "Lenha (m3)",
'Lenha(st)'= "Lenha (st)",
'Mourões (m3)'= "Mouroes (m3)",
'Mourões(m3)'= "Mouroes (m3)",
'Mourões(st)'= "Mouroes (st)",
'tora (m3)' = "Tora (m3)",
'Tora (m3)'= "Tora (m3)",
'Tora(m3)'= "Tora (m3)",
'Toretes (m3)'= "Toretes (m3)",
'Toretes(m3)'= "Toretes (m3)",
'Vara(m3)'= "Vara (m3)"))
dadostotais <- dadostotais |>
filter(PRODUTO == "Tora (m3)") |>
mutate(PRODUTO = fct_drop(PRODUTO))
View(dadostotais)
setwd("C:/Users/larar/OneDrive/Área de Trabalho")
setwd("C:/Users/larar/OneDrive/Área de Trabalho/eda dash")
